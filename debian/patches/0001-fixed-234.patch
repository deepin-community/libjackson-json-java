From 8404cf0b1fb700e5a179abd71137f3057846b80f Mon Sep 17 00:00:00 2001
From: cowtowncoder <cowtowncoder@cc757fca-8a48-0410-80b4-e22f7f27f4c6>
Date: Tue, 13 Aug 2013 04:26:38 +0000
Subject: [PATCH] fixed #234

---

upstream link: https://github.com/FasterXML/jackson-1/commit/8404cf0b1fb700e5a179abd71137f3057846b80f

diff --git a/src/mapper/java/org/codehaus/jackson/map/ser/std/MapSerializer.java b/src/mapper/java/org/codehaus/jackson/map/ser/std/MapSerializer.java
index c2c447cb..041da2f4 100644
--- a/src/mapper/java/org/codehaus/jackson/map/ser/std/MapSerializer.java
+++ b/src/mapper/java/org/codehaus/jackson/map/ser/std/MapSerializer.java
@@ -344,7 +344,11 @@ public class MapSerializer
                 if (cc == prevValueClass) {
                     currSerializer = prevValueSerializer;
                 } else {
-                    currSerializer = provider.findValueSerializer(cc, _property);
+                    if (_valueType.hasGenericTypes()) {
+                        currSerializer = provider.findValueSerializer(provider.constructSpecializedType(_valueType, cc), _property);
+                    } else {
+                        currSerializer = provider.findValueSerializer(cc, _property);
+                    }
                     prevValueSerializer = currSerializer;
                     prevValueClass = cc;
                 }
@@ -417,6 +421,5 @@ public class MapSerializer
         }
         return result.serializer;
     }
-
 }
 
diff --git a/src/test/org/codehaus/jackson/map/jsontype/TestDefaultForMaps.java b/src/test/org/codehaus/jackson/map/jsontype/TestDefaultForMaps.java
index 15be85e4..97741a35 100644
--- a/src/test/org/codehaus/jackson/map/jsontype/TestDefaultForMaps.java
+++ b/src/test/org/codehaus/jackson/map/jsontype/TestDefaultForMaps.java
@@ -39,6 +39,33 @@ public class TestDefaultForMaps
         public Map<MapKey,List<Object>> map;
     }
 
+    // // For #234
+    
+    static class ItemList {
+        public String value;
+        public List<ItemList> childItems = new LinkedList<ItemList>();
+
+        public void addChildItem(ItemList l) { childItems.add(l); }
+    }
+
+    static class ItemMap
+    {
+        public String value;
+
+        public Map<String, List<ItemMap>> childItems = new HashMap<String, List<ItemMap>>();
+
+        public void addChildItem(String key, ItemMap childItem) {
+          List<ItemMap> items;
+          if (childItems.containsKey(key)) {
+              items = childItems.get(key);
+          } else {
+              items = new ArrayList<ItemMap>();
+          }
+          items.add(childItem);
+          childItems.put(key, items);
+        }
+    }
+
     /*
     /**********************************************************
     /* Unit tests
@@ -94,4 +121,38 @@ public class TestDefaultForMaps
         return TypeNameIdResolver.construct(mapper.getDeserializationConfig(),
                 TypeFactory.defaultInstance().constructType(Object.class), subtypes, forSerialization, !forSerialization);
     }
+
+    // // For #234:
+    
+    public void testList() throws Exception
+    {
+        final ObjectMapper mapper = new ObjectMapper();
+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);
+        ItemList child = new ItemList();
+        child.value = "I am child";
+
+        ItemList parent = new ItemList();
+        parent.value = "I am parent";
+        parent.addChildItem(child);
+        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(parent);
+
+        Object o = mapper.readValue(json, ItemList.class);
+        assertNotNull(o);
+    }
+
+    public void testMap() throws Exception
+    {
+        final ObjectMapper mapper = new ObjectMapper();
+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);
+        ItemMap child = new ItemMap();
+        child.value = "I am child";
+
+        ItemMap parent = new ItemMap();
+        parent.value = "I am parent";
+        parent.addChildItem("child", child);
+
+        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(parent);
+        Object o = mapper.readValue(json, ItemMap.class);
+        assertNotNull(o);
+    }
 }
-- 
2.20.1

